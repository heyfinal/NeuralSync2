#!/usr/bin/env bash
# NeuralSync-enhanced Gemini CLI wrapper
# Provides shared memory context from NeuralSync to Gemini

set -euo pipefail

# Get script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
NEURALSYNC_DIR="$( cd "${SCRIPT_DIR}/.." && pwd )"

# Set environment for NeuralSync integration
export TOOL_NAME="gemini"
export NS_HOST="${NS_HOST:-127.0.0.1}"
export NS_PORT="${NS_PORT:-8373}"

# Handle special cases for gemini arguments
FILTERED_ARGS=()
CONTEXT_MODE="full"

for arg in "$@"; do
    case "$arg" in
        --no-context)
            CONTEXT_MODE="none"
            ;;
        --minimal-context)
            CONTEXT_MODE="minimal"
            export NS_MINIMAL_CONTEXT="1"
            ;;
        *)
            FILTERED_ARGS+=("$arg")
            ;;
    esac
done

# Check if we should bypass NeuralSync context (for simple commands)
BYPASS_CONTEXT=0
if [ "$CONTEXT_MODE" = "none" ]; then
    BYPASS_CONTEXT=1
elif [ "${#FILTERED_ARGS[@]}" -eq 1 ]; then
    case "${FILTERED_ARGS[0]}" in
        --help|--version|-h|-v|help|version)
            BYPASS_CONTEXT=1
            ;;
    esac
fi

# Find gemini executable
GEMINI_CMD=""
if command -v gemini &> /dev/null; then
    GEMINI_CMD="gemini"
elif command -v gemini-cli &> /dev/null; then
    GEMINI_CMD="gemini-cli"
else
    echo "ERROR: Gemini CLI not found in PATH" >&2
    echo "Please install Gemini CLI first" >&2
    exit 1
fi

# Execute gemini with or without NeuralSync context
if [ "$BYPASS_CONTEXT" -eq 1 ]; then
    # Direct execution without NeuralSync wrapper
    exec "$GEMINI_CMD" "${FILTERED_ARGS[@]}"
else
    # Execute through NeuralSync wrapper
    if [ -n "${FILTERED_ARGS[*]}" ]; then
        exec "${NEURALSYNC_DIR}/nswrap" -- "$GEMINI_CMD" "${FILTERED_ARGS[@]}"
    else
        exec "${NEURALSYNC_DIR}/nswrap" -- "$GEMINI_CMD"
    fi
fi