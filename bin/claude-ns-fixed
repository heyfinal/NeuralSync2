#!/usr/bin/env bash
# NeuralSync-enhanced Claude Code CLI wrapper
# Provides shared memory context from NeuralSync to Claude Code

set -euo pipefail

# Get script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
NEURALSYNC_DIR="$( cd "${SCRIPT_DIR}/.." && pwd )"

# Set environment for NeuralSync integration
export TOOL_NAME="claude-code"
export NS_HOST="${NS_HOST:-127.0.0.1}"
export NS_PORT="${NS_PORT:-8373}"

# Handle special cases for claude arguments
FILTERED_ARGS=()
CONTEXT_MODE="full"

for arg in "$@"; do
    case "$arg" in
        --no-context)
            CONTEXT_MODE="none"
            ;;
        --minimal-context)
            CONTEXT_MODE="minimal"
            export NS_MINIMAL_CONTEXT="1"
            ;;
        *)
            FILTERED_ARGS+=("$arg")
            ;;
    esac
done

# Check if we should bypass NeuralSync context (for simple commands)
BYPASS_CONTEXT=0
if [ "$CONTEXT_MODE" = "none" ]; then
    BYPASS_CONTEXT=1
elif [ "${#FILTERED_ARGS[@]}" -eq 1 ]; then
    case "${FILTERED_ARGS[0]}" in
        --help|--version|-h|-v|help|version)
            BYPASS_CONTEXT=1
            ;;
    esac
fi

# Find claude executable
CLAUDE_CMD=""
if command -v claude &> /dev/null; then
    CLAUDE_CMD="claude"
elif command -v claude-code &> /dev/null; then
    CLAUDE_CMD="claude-code"
else
    echo "ERROR: Claude CLI not found in PATH" >&2
    echo "Please install Claude Code CLI first" >&2
    exit 1
fi

# Execute claude with or without NeuralSync context
if [ "$BYPASS_CONTEXT" -eq 1 ]; then
    # Direct execution without NeuralSync wrapper
    exec "$CLAUDE_CMD" "${FILTERED_ARGS[@]}"
else
    # Execute through NeuralSync wrapper
    NSWRAP_PATH="${SCRIPT_DIR}/nswrap"
    if [ -n "${FILTERED_ARGS[*]}" ]; then
        exec "$NSWRAP_PATH" -- "$CLAUDE_CMD" "${FILTERED_ARGS[@]}"
    else
        exec "$NSWRAP_PATH" -- "$CLAUDE_CMD"
    fi
fi