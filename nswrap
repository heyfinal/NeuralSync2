#!/usr/bin/env python3
import os, sys, shlex, subprocess, requests, asyncio
from typing import Optional
from pathlib import Path

# Add neuralsync to path for imports
sys.path.insert(0, str(Path(__file__).parent))

NS = os.environ.get("NS_ENDPOINT", f"http://{os.environ.get('NS_HOST','127.0.0.1')}:{os.environ.get('NS_PORT','8373')}")
HEAD = {"Authorization": f"Bearer {os.environ['NS_TOKEN']}"} if os.environ.get("NS_TOKEN") else {}

def ensure_neuralsync_running():
    """Fast NeuralSync connectivity check"""
    try:
        # Quick health check first
        response = requests.get(f"{NS}/health", headers=HEAD, timeout=1)
        if response.status_code == 200:
            return True
    except:
        pass
    
    # If health check fails, try daemon manager (but don't wait long)
    try:
        from neuralsync.enhanced_daemon_manager import ensure_neuralsync_running_enhanced
        return asyncio.wait_for(ensure_neuralsync_running_enhanced(), timeout=3)
    except (ImportError, asyncio.TimeoutError):
        try:
            from neuralsync.daemon_manager import ensure_neuralsync_running
            return asyncio.wait_for(ensure_neuralsync_running(), timeout=3)
        except (ImportError, asyncio.TimeoutError):
            return False

def get_preamble(tool: Optional[str]):
    """Optimized context retrieval with faster timeouts and minimal data"""
    try:
        # Fast persona check with short timeout
        persona_response = requests.get(f"{NS}/persona", headers=HEAD, timeout=1)
        persona = persona_response.json().get("text","") if persona_response.status_code == 200 else ""
        
        # Quick recall with reduced items and short timeout
        recall_response = requests.post(f"{NS}/recall", headers=HEAD, 
                                      json={"query":"", "top_k":3, "scope":"any", "tool":tool}, 
                                      timeout=2)
        recall = recall_response.json() if recall_response.status_code == 200 else {"items": []}
        
        pre = []
        if persona:
            pre += [f"Persona: {persona}", ""]
        for i,it in enumerate(recall.get("items",[]),1):
            pre.append(f"[M{i}] ({it.get('kind')},{it.get('scope')},conf={it.get('confidence','')}) {it.get('text','')}")
        return "\n".join(pre)+("\n\n" if pre else "")
    except:
        # If NeuralSync is unavailable, continue without context
        return ""

def send_remember(line: str):
    try:
        if not line.startswith("@remember:"): return
        payload = {"text":"", "kind":"note", "scope":"global", "tool":None, "tags":[], "confidence":0.8, "source":"nswrap"}
        rest = line[len("@remember:"):].strip()
        parts = shlex.split(rest)
        text_seen = False
        text_val = []
        for p in parts:
            if "=" in p and not text_seen:
                k,v = p.split("=",1)
                if k in ["kind","scope","tool"]:
                    payload[k]=None if v.lower()=="none" else v
                elif k=="confidence": payload["confidence"]=float(v)
                elif k=="tag": payload.setdefault("tags",[]).append(v)
            else:
                text_seen = True
                text_val.append(p)
        if text_val and not payload["text"]:
            payload["text"]=" ".join(text_val).strip('"')
        if payload["text"]:
            requests.post(f"{NS}/remember", headers=HEAD, json=payload, timeout=10)
    except Exception:
        pass

def main():
    # Ensure NeuralSync is running before proceeding
    if not ensure_neuralsync_running():
        print("⚠️  Warning: NeuralSync services may not be fully available", file=sys.stderr)
    
    if "--" in sys.argv:
        idx = sys.argv.index("--")
        cmd = sys.argv[idx+1:]
        tool = os.environ.get("TOOL_NAME")
    else:
        # Default behavior - if no command specified, just show help
        if len(sys.argv) == 1:
            print("Usage: nswrap -- <command> [args...]")
            print("Environment: Set TOOL_NAME to identify tool context")
            sys.exit(0)
        cmd = sys.argv[1:]  # Use remaining args as command
        tool = os.environ.get("TOOL_NAME")
    
    # Get preamble with enhanced error handling - only if tool is meaningful
    preamble = ""
    if tool and cmd[0] not in ['--help', '--version', '-h', '-v']:
        try:
            preamble = get_preamble(tool)
        except requests.RequestException as e:
            print(f"⚠️  Warning: Could not retrieve NeuralSync context: {e}", file=sys.stderr)
            preamble = ""
        except Exception as e:
            # Silently fail for other errors to avoid disrupting tool usage
            preamble = ""
    
    # Handle stdin intelligently - don't block on empty input
    if sys.stdin.isatty():
        # Interactive mode - don't read stdin unless there's actual input
        user_input = ""
    else:
        # Non-interactive mode - read with timeout to avoid hanging
        try:
            import select
            if select.select([sys.stdin], [], [], 0.1)[0]:  # 100ms timeout
                user_input = sys.stdin.read()
            else:
                user_input = ""
        except ImportError:
            # Fallback for platforms without select
            user_input = ""
    
    data = preamble + user_input
    proc = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
    out,_ = proc.communicate(input=data)
    for line in out.splitlines():
        print(line)
        if line.startswith("@remember:"):
            send_remember(line)
    sys.exit(proc.returncode)

if __name__ == "__main__":
    main()
